<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Speckle.Objects</name>
    </assembly>
    <members>
        <member name="T:Speckle.Objects.Data.ArcgisObject">
            <summary>
            Represents a ArcGIS.Core.CoreObjectsBase object in ArcGIS
            </summary>
        </member>
        <member name="T:Speckle.Objects.Data.ArchicadObject">
            <summary>
            Represents a base class object in Archicad
            </summary>
        </member>
        <member name="T:Speckle.Objects.Data.Civil3dObject">
            <summary>
            Represents an Autodesk.Civil.DatabaseServices.Entity object in Civil3d
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.Civil3dObject.baseCurves">
            <summary>
            Curves representing the base curve of an entity
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.Civil3dObject.elements">
            <summary>
            Children objects, eg profiles, this civil entity may contain.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Data.EtabsObject">
            <summary>
            Represents a wrapper object in ETABS
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.EtabsObject.elements">
            <summary>
            Children objects, eg joints, this etabs object may contain.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Data.NavisworksObject">
            <summary>
            Represents a "first selectable ancestor" Navisworks.ModelItem object in Navisworks
            </summary>
        </member>
        <member name="T:Speckle.Objects.Data.RevitObject">
            <summary>
            Represents an Autodesk.Revit.DB.Element object in Revit
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.RevitObject.level">
            <summary>
            The level constraint of the object.
            For objects constrained by multiple levels, this represents the base constraint.
            For objects with no level constraint, this should be null.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.RevitObject.location">
            <summary>
            A Curve or Point object representing the location of a Revit element.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.RevitObject.elements">
            <summary>
            Children objects, eg hosted elements, this RevitObject may contain.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Data.TeklaObject">
            <summary>
            Represents an Tekla.Structures.Model.ModelObject object in Tekla Structures
            </summary>
        </member>
        <member name="P:Speckle.Objects.Data.TeklaObject.elements">
            <summary>
            Children objects, eg profiles, this tekla modelobject may contain.
            </summary>
        </member>
        <member name="T:Speckle.Objects.CurveArrayEncodingExtensions">
            <summary>
            This class is a helper class for Brep curve encoding!!
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.Arc">
            <summary>
            Represents a sub-curve of a three-dimensional circle.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.plane">
            <summary>
            Gets or sets the plane of the <see cref="T:Speckle.Objects.Geometry.Arc"/>.
            The plane origin is the <see cref="T:Speckle.Objects.Geometry.Arc"/> center.
            The plane normal indicates the handedness of the <see cref="T:Speckle.Objects.Geometry.Arc"/> such that direction from <see cref="P:Speckle.Objects.Geometry.Arc.startPoint"/> to <see cref="P:Speckle.Objects.Geometry.Arc.endPoint"/> is counterclockwise.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.startPoint">
            <summary>
            The start <see cref="T:Speckle.Objects.Geometry.Point"/> of the <see cref="T:Speckle.Objects.Geometry.Arc"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.midPoint">
            <summary>
            Gets or sets the point at 0.5 length.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.endPoint">
            <summary>
            The end <see cref="T:Speckle.Objects.Geometry.Point"/> of the <see cref="T:Speckle.Objects.Geometry.Arc"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.radius">
            <summary>
            The radius of the <see cref="T:Speckle.Objects.Geometry.Arc"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.startAngle">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.endAngle">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.angleRadians">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.measure">
            <summary>
            The measure of the <see cref="T:Speckle.Objects.Geometry.Arc"/> in radians.
            Calculated using the arc addition postulate using the <see cref="P:Speckle.Objects.Geometry.Arc.midPoint"/>.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.units">
            <summary>
            The units this object was specified in.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.domain">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.length">
            <summary>
            The length of the <see cref="T:Speckle.Objects.Geometry.Arc"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.area">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Arc.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Arc.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Arc@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Arc.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Arc.ToList">
            <summary>
            Creates a flat list with the values of the <see cref="T:Speckle.Objects.Geometry.Arc"/>
            This is only used for serialisation purposes.
            </summary>
            <returns>A list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Arc"/>'s value</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Arc.FromList(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Arc"/> instance based on a flat list of numerical values.
            This is only used for deserialisation purposes.
            </summary>
            <remarks>The input list should be the result of having called <see cref="M:Speckle.Objects.Geometry.Arc.ToList"/></remarks>
            <param name="list">A list of numbers</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Arc"/> with the values assigned from the list.</returns>
        </member>
        <member name="T:Speckle.Objects.Geometry.Autocad.AutocadPolycurve">
            <summary>
            A curve that is comprised of line, arc and/or curve segments, representing the Autocad Polyline, Polyline2d, and Polyline3d classes.
            </summary>
            <remarks>
            <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.Light"/> and <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.Simple2d"/> types will have only <see cref="T:Speckle.Objects.Geometry.Line"/>s and <see cref="T:Speckle.Objects.Geometry.Arc"/>s in <see cref="P:Speckle.Objects.Geometry.Polycurve.segments"/>.
            <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.Simple3d"/> type will have only <see cref="T:Speckle.Objects.Geometry.Line"/>s in <see cref="P:Speckle.Objects.Geometry.Polycurve.segments"/>.
            <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.FitCurve2d"/> type will only have <see cref="T:Speckle.Objects.Geometry.Arc"/>s in <see cref="P:Speckle.Objects.Geometry.Polycurve.segments"/>.
            <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.CubicSpline2d"/>, <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.CubicSpline3d"/>, <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.QuadSpline2d"/>, and <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.QuadSpline3d"/> types will have only a single <see cref="T:Speckle.Objects.Geometry.Curve"/>s in <see cref="P:Speckle.Objects.Geometry.Polycurve.segments"/>.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Autocad.AutocadPolycurve.value">
            <summary>
            Gets or sets the raw coordinates of the vertices.
            </summary>
            <remarks>
            For <see cref="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.Light"/> Polylines, these are xy coordinates in the Object Coordinate System (OCS)/>.
            For Polyline2d and Polyline3d types, these are xyz coordinates in the Global Coordinate System. fml.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Autocad.AutocadPolycurve.bulges">
            <summary>
            The bulge factor at each vertex. Should be null for Polyline3d.
            </summary>
            <remarks>
            The bulge factor is used to indicate how much of an arc segment is present at this vertex.
            The bulge factor is the tangent of one fourth the included angle for an arc segment,
            made negative if the arc goes clockwise from the start point to the endpoint.
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Autocad.AutocadPolycurve.tangents">
            <summary>
            The tangent in radians at each vertex. Should be null for Polyline and Polyline3d.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Autocad.AutocadPolycurve.normal">
            <summary>
            The normal of the plane of the Autocad Polyline or Polyline2d. Should be null for Polyline3d.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Autocad.AutocadPolycurve.elevation">
            <summary>
            The distance from the plane to the origin of the Autocad Polyline or Polyline2d. Should be null for Polyline3d.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.Autocad.AutocadPolyType">
            <summary>
            Represents the type of a Autocad Polyline.
            </summary>
        </member>
        <member name="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.Unknown">
            Polyline type is not known
        </member>
        <member name="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.Light">
            Polyline type is the Autocad Polyline class
        </member>
        <member name="F:Speckle.Objects.Geometry.Autocad.AutocadPolyType.FitCurve2d">
            The Autocad Polyline2d fit curve poly type. Constructed with pairs of arcs with continuous tangents.
        </member>
        <member name="T:Speckle.Objects.Geometry.Box">
            <summary>
            Represents a 3-dimensional box oriented on a plane.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.plane">
            <summary>
            Gets or sets the plane that defines the orientation of the <see cref="T:Speckle.Objects.Geometry.Box"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.xSize">
            <summary>
            Gets or sets the <see cref="T:Speckle.Objects.Primitive.Interval"/> that defines the min and max coordinate in the X direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.ySize">
            <summary>
            Gets or sets the <see cref="T:Speckle.Objects.Primitive.Interval"/> that defines the min and max coordinate in the Y direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.zSize">
            <summary>
            Gets or sets the <see cref="T:Speckle.Objects.Primitive.Interval"/> that defines the min and max coordinate in the Y direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.units">
            <summary>
            The units this object's coordinates are in.
            </summary>
            <remarks>
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Box.volume">
            <inheritdoc/>
        </member>
        <member name="T:Speckle.Objects.Geometry.Brep">
            <summary>
            Represents a "Boundary Representation" Solid
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.units">
            <summary>
            The unit's this object's coordinates are in.
            </summary>
            <remarks>
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Surfaces">
            <summary>
            Gets or sets the list of surfaces in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.SurfacesValue">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s surfaces.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Curve3D">
            <summary>
            Gets or sets the list of 3-dimensional curves in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Curve3DValues">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s 3D curves.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Curve3D"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Curve2D">
            <summary>
            Gets or sets the list of 2-dimensional UV curves in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Curve2DValues">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s 2D curves.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Curve2D"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Vertices">
            <summary>
            Gets or sets the list of vertices in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.VerticesValue">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s vertices.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Vertices"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Edges">
            <summary>
            Gets or sets the list of edges in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.EdgesValue">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s edges.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Edges"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Loops">
            <summary>
            Gets or sets the list of closed UV loops in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.LoopsValue">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s loops.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Loops"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Trims">
            <summary>
            Gets or sets the list of UV trim segments for each surface in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.TrimsValue">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s trims.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Trims"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Faces">
            <summary>
            Gets or sets the list of faces in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.FacesValue">
            <summary>
            Gets or sets the flat list of numbers representing the <see cref="T:Speckle.Objects.Geometry.Brep"/>'s faces.
            </summary>
            <remarks>
            This is only used for the <see cref="T:Speckle.Objects.Geometry.Brep"/> class serialisation/deserialisation. You should use <see cref="P:Speckle.Objects.Geometry.Brep.Faces"/> instead.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.IsClosed">
            <summary>
            Gets or sets if this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance is closed or not.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.Orientation">
            <summary>
            Gets or sets the list of surfaces in this <see cref="T:Speckle.Objects.Geometry.Brep"/> instance.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.displayValue">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.bbox">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Brep.volume">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Brep.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Brep@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Brep.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepOrientation">
            <summary>
            Represents the orientation of a <see cref="T:Speckle.Objects.Geometry.Brep"/>
            </summary>
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepOrientation.None">
            Brep has no specific orientation
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepOrientation.Inward">
            Brep faces inward
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepOrientation.Outward">
            Brep faces outward
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepOrientation.Unknown">
            Orientation is not known
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepLoopType">
            <summary>
            Represents the type of a loop in a <see cref="T:Speckle.Objects.Geometry.Brep"/>'s face.
            </summary>
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepLoopType.Unknown">
            Loop type is not known
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepLoopType.Outer">
            Loop is the outer loop of a face
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepLoopType.Inner">
            Loop is an inner loop of a face
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepLoopType.Slit">
            Loop is a closed curve with no area.
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepLoopType.CurveOnSurface">
            Loop represents a curve on a surface
        </member>
        <member name="F:Speckle.Objects.Geometry.BrepLoopType.PointOnSurface">
            Loop is collapsed to a point.
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepTrimType">
            <summary>
            Represents the type of a trim in a <see cref="T:Speckle.Objects.Geometry.Brep"/>'s loop.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepEdge">
            <summary>
            Represents an edge of the <see cref="P:Speckle.Objects.Geometry.BrepEdge.Brep"/>.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepFace">
            <summary>
            Represents a face on a <see cref="P:Speckle.Objects.Geometry.BrepFace.Brep"/>
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepLoop">
            <summary>
            Represents a UV Trim Closed Loop on one of the <see cref="P:Speckle.Objects.Geometry.BrepLoop.Brep"/>'s surfaces.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.BrepTrim">
            <summary>
            Represents a UV Trim curve for one of the <see cref="P:Speckle.Objects.Geometry.BrepTrim.Brep"/>'s surfaces.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.Circle">
            <summary>
            Represents a circular curve based on a base <see cref="T:Speckle.Objects.Geometry.Plane"/> and a <see cref="T:System.Double"/> as radius.
            </summary>
            <remarks>
            These circles are expected to be full (untrimmed) circles.
            For trimmed circles, convert them as <see cref="T:Speckle.Objects.Geometry.Arc"/>s instead
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.radius">
            <summary>
            The radius of the circle
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.plane">
            <summary>
            The <see cref="T:Speckle.Objects.Geometry.Plane"/> the circle lies in.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.units">
            <summary>
            The units this object was modeled in.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.domain">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.length">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Circle.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Circle.ToList">
            <summary>
            Returns the coordinates of this <see cref="T:Speckle.Objects.Geometry.Circle"/> as a list of numbers
            </summary>
            <returns>A list of values representing the <see cref="T:Speckle.Objects.Geometry.Circle"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Circle.FromList(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Circle"/> based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of values representing this <see cref="T:Speckle.Objects.Geometry.Circle"/></param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Circle"/> with the provided values.</returns>
        </member>
        <member name="P:Speckle.Objects.Geometry.ControlPoint.value">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.rational">
            <summary>
            "True" if weights differ, "False" if weights are the same.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.weights">
            <summary>
            Gets or sets the weights for this <see cref="T:Speckle.Objects.Geometry.Curve"/>. Use a default value of 1 for unweighted points.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.knots">
            <summary>
            Gets or sets the knots for this <see cref="T:Speckle.Objects.Geometry.Curve"/>. Count should be equal to <see cref="P:Speckle.Objects.Geometry.Curve.points"/> count + <see cref="P:Speckle.Objects.Geometry.Curve.degree"/> + 1.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.units">
            <summary>
            The units this object was specified in.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.domain">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.length">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.displayValue">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Curve.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Curve.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Curve@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Curve.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Curve.GetPoints">
            <returns><see cref="P:Speckle.Objects.Geometry.Curve.points"/> as list of <see cref="T:Speckle.Objects.Geometry.Point"/>s</returns>
            <exception cref="T:Speckle.Sdk.SpeckleException">when list is malformed</exception>
        </member>
        <member name="M:Speckle.Objects.Geometry.Curve.ToList">
            <summary>
            Returns the values of this <see cref="T:Speckle.Objects.Geometry.Curve"/> as a list of numbers.
            </summary>
            <returns>A list of values representing the <see cref="T:Speckle.Objects.Geometry.Curve"/></returns>
            <remarks>
            This is currently only used for encoding optimization in curves in breps!
            </remarks>
        </member>
        <member name="M:Speckle.Objects.Geometry.Curve.FromList(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Curve"/> based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of values representing this <see cref="T:Speckle.Objects.Geometry.Curve"/></param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Curve"/> with the provided values.</returns>
            <remarks>
            This is currently being used only for deserialization of Brep curves!
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.firstRadius">
            <summary>
            Gets or sets the first radius of the <see cref="T:Speckle.Objects.Geometry.Ellipse"/>. This is usually the major radius.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.secondRadius">
            <summary>
            Gets or sets the second radius of the <see cref="T:Speckle.Objects.Geometry.Ellipse"/>. This is usually the minor radius.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.plane">
            <summary>
            Gets or sets the plane to draw this ellipse in.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.trimDomain">
            <summary>
            Gets or set the domain interval to trim this <see cref="T:Speckle.Objects.Geometry.Ellipse"/> with.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.bbox">
            <inheritdoc />
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.domain">
            <summary>
            Gets or sets the domain interval for this <see cref="T:Speckle.Objects.Geometry.Ellipse"/>.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.length">
            <inheritdoc />
        </member>
        <member name="P:Speckle.Objects.Geometry.Ellipse.area">
            <inheritdoc />
        </member>
        <member name="M:Speckle.Objects.Geometry.Line.#ctor(System.Collections.Generic.IList{System.Double},System.String,System.String)">
            <param name="coordinates"></param>
            <param name="units"></param>
            <param name="applicationId"></param>
            <exception cref="T:System.ArgumentException"><paramref name="coordinates"/> must have a length of 6</exception>
        </member>
        <member name="P:Speckle.Objects.Geometry.Line.area">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            You should not use this for anything.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Line.value">
            <summary>
            OBSOLETE - This is just here for backwards compatibility.
            You should not use this for anything. Access coordinates using start and end point.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.Mesh">
            <remarks><a href="https://speckle.notion.site/Objects-Geometry-Mesh-9b0bf5ab92bf42f58bf2fe3922d2efca">More docs on notion</a></remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.vertices">
            <summary>
            Flat list of vertex data (flat <c>x,y,z,x,y,z...</c> list)
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.faces">
            <summary>
            Flat list of face data<br/>
            Each face starts with the length of the face (e.g. 3 in the case of triangles), followed by that many indices
            </summary>
            <remarks>
            N-gons are supported, but large values of n (> ~50) tend to cause significant performance problems for consumers (e.g. HostApps and <see cref="T:Speckle.Objects.Utils.MeshTriangulationHelper"/>.
            </remarks>
            <example>
            <code>[
              3, 0, 1, 2, //first face, a triangle (3-gon)
              4, 1, 2, 3, 4, //second face, a quad (4-gon)
              6, 4, 5, 6, 7, 8, 9, //third face, an n-gon (6-gon)
            ];</code></example>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.colors">
            <summary>Vertex colors as ARGB <see cref="T:System.Int32"/>s</summary>
            <remarks>Expected that there are either 1 color per vertex, or an empty <see cref="T:System.Collections.Generic.List`1"/></remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.textureCoordinates">
            <summary>Flat list of texture coordinates (flat <c>u,v,u,v,u,v...</c> list)</summary>
            <remarks>Expected that there are either 1 texture coordinate per vertex, or an empty <see cref="T:System.Collections.Generic.List`1"/></remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.vertexNormals">
            <summary>
            <summary>Flat list of vertex normal data (flat <c>x,y,z,x,y,z...</c> list)</summary>
            <remarks>Expected that there are either 1 texture coordinate per vertex, or an empty <see cref="T:System.Collections.Generic.List`1"/></remarks>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Mesh"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.bbox">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Mesh.volume">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Mesh.Transform(Speckle.Objects.Other.Transform)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Mesh.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Mesh@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Mesh.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Mesh.GetPoint(System.Int32)">
            <summary>
            Gets a vertex as a <see cref="T:Speckle.Objects.Geometry.Point"/> by <paramref name="index"/>
            </summary>
            <param name="index">The index of the vertex</param>
            <returns>Vertex as a <see cref="T:Speckle.Objects.Geometry.Point"/></returns>
            <remarks>It is usually recommended to instead consume the <see cref="P:Speckle.Objects.Geometry.Mesh.vertices"/> list manually for better performance</remarks>
        </member>
        <member name="M:Speckle.Objects.Geometry.Mesh.GetPoints">
            <returns><see cref="P:Speckle.Objects.Geometry.Mesh.vertices"/> as list of <see cref="T:Speckle.Objects.Geometry.Point"/>s</returns>
            <exception cref="T:Speckle.Sdk.SpeckleException">when list is malformed</exception>
            <remarks>It is usually recommended to instead consume the <see cref="P:Speckle.Objects.Geometry.Mesh.vertices"/> list manually for better performance</remarks>
        </member>
        <member name="M:Speckle.Objects.Geometry.Mesh.GetTextureCoordinate(System.Int32)">
            <summary>
            Gets a texture coordinate as a <see cref="T:System.ValueTuple`2"/> by <paramref name="index"/>
            </summary>
            <param name="index">The index of the texture coordinate</param>
            <returns>Texture coordinate as a <see cref="T:System.ValueTuple`2"/></returns>
        </member>
        <member name="T:Speckle.Objects.Geometry.Plane">
            <summary>
            A 3-dimensional Plane consisting of an origin <see cref="T:Speckle.Objects.Geometry.Point"/>, and 3 <see cref="T:Speckle.Objects.Geometry.Vector"/> as its X, Y and Z axis.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Plane.origin">
            <summary>
            The <see cref="T:Speckle.Objects.Geometry.Plane"/>s origin point.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Plane.normal">
            <summary>
            The <see cref="T:Speckle.Objects.Geometry.Plane"/>s Z axis.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Plane.xdir">
            <summary>
            The <see cref="T:Speckle.Objects.Geometry.Plane"/>s X axis.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Plane.ydir">
            <summary>
            The <see cref="T:Speckle.Objects.Geometry.Plane"/>s Y axis.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Plane.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Plane"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="M:Speckle.Objects.Geometry.Plane.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Plane@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Plane.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Plane.ToList">
            <summary>
            Returns the values of this <see cref="T:Speckle.Objects.Geometry.Plane"/> as a list of numbers
            </summary>
            <returns>A list of values representing the Plane.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Plane.FromList(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Plane"/> based on a list of values and the unit they're drawn in.
            </summary>
            <param name="list">The list of values representing this plane</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Plane"/> with the provided values.</returns>
        </member>
        <member name="T:Speckle.Objects.Geometry.Point">
            <summary>
            A 3-dimensional point
            </summary>
            <remarks>
            TODO: The Point class does not override the Equality operator, which means that there may be cases where `Equals` is used instead of `==`, as the comparison will be done by reference, not value.
            </remarks>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.#ctor(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Speckle.Objects.Geometry.Point"/> from a set of coordinates and it's units.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
            <param name="units">The units of the point's coordinates. Defaults to Meters. </param>
            <param name="applicationId">The object's unique application ID</param>
        </member>
        <member name="P:Speckle.Objects.Geometry.Point.x">
            <summary>
            The x coordinate of the point.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Point.y">
            <summary>
            The y coordinate of the point.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Point.z">
            <summary>
            The z coordinate of the point.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Point.units">
            <summary>
            The units this <see cref="T:Speckle.Objects.Geometry.Point"/> is in.
            This should be one of the units specified in <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Point@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.ToList">
            <summary>
            Returns the coordinates of this <see cref="T:Speckle.Objects.Geometry.Point"/> as a list of numbers
            </summary>
            <returns>A list of coordinates {x, y, z} </returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.FromList(System.Collections.Generic.IList{System.Double},System.String)">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Point"/> based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of coordinates {x, y, z}</param>
            <param name="units">The units the coordinates are in</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Point"/> with the provided coordinates.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.Deconstruct(System.Double@,System.Double@,System.Double@,System.String@)">
            <summary>
            Deconstructs a <see cref="T:Speckle.Objects.Geometry.Point"/> into it's coordinates and units
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
            <param name="units">The units the point's coordinates are in.</param>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.Deconstruct(System.Double@,System.Double@,System.Double@)">
            <summary>
            Deconstructs a <see cref="T:Speckle.Objects.Geometry.Point"/> into it's coordinates and units
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.Midpoint(Speckle.Objects.Geometry.Point,Speckle.Objects.Geometry.Point)">
            <summary>
            Computes a point equidistant from two points.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A point at the same distance from <paramref name="point1"/> and <paramref name="point2"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.Distance(Speckle.Objects.Geometry.Point,Speckle.Objects.Geometry.Point)">
            <summary>
            Computes the distance between two points
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>The distance from <paramref name="point1"/> to <paramref name="point2"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Point.DistanceTo(Speckle.Objects.Geometry.Point)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="point">point for distance measurement</param>
            <returns>The length of the line between this and the other point</returns>
        </member>
        <member name="P:Speckle.Objects.Geometry.Point.value">
            <summary>
            Gets or sets the coordinates of the <see cref="T:Speckle.Objects.Geometry.Point"/>
            </summary>
        </member>
        <member name="T:Speckle.Objects.Geometry.Pointcloud">
            <summary>
            A collection of points, with color and size support.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Pointcloud.points">
            <summary>
            Gets or sets the list of points of this <see cref="T:Speckle.Objects.Geometry.Pointcloud"/>, stored as a flat list of coordinates [x1,y1,z1,x2,y2,...]
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Pointcloud.colors">
            <summary>
            Gets or sets the list of colors of this <see cref="T:Speckle.Objects.Geometry.Pointcloud"/>'s points., stored as ARGB <see cref="T:System.Int32"/>s.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Pointcloud.sizes">
            <summary>
            Gets or sets the list of sizes of this <see cref="T:Speckle.Objects.Geometry.Pointcloud"/>'s points.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Pointcloud.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Pointcloud"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Pointcloud.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Pointcloud.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Pointcloud@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Pointcloud.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Pointcloud.GetPoints">
            <returns><see cref="P:Speckle.Objects.Geometry.Pointcloud.points"/> as list of <see cref="T:Speckle.Objects.Geometry.Point"/>s</returns>
            <exception cref="T:Speckle.Sdk.SpeckleException">when list is malformed</exception>
        </member>
        <member name="T:Speckle.Objects.Geometry.Polycurve">
            <summary>
            A curve that is comprised of multiple curves connected.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.segments">
            <summary>
            Gets or sets the list of segments that comprise this <see cref="T:Speckle.Objects.Geometry.Polycurve"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.closed">
            <summary>
            Gets or sets a Boolean value indicating if the <see cref="T:Speckle.Objects.Geometry.Polycurve"/> is closed
            (i.e. The start point of the first segment and the end point of the last segment coincide.)
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Polycurve"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.domain">
            <summary>
            The internal domain of this curve.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.length">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polycurve.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polycurve.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polycurve.op_Implicit(Speckle.Objects.Geometry.Polyline)~Speckle.Objects.Geometry.Polycurve">
            <summary>
            Constructs a new <see cref="T:Speckle.Objects.Geometry.Polycurve"/> instance from an existing <see cref="T:Speckle.Objects.Geometry.Polyline"/> curve.
            </summary>
            <param name="polyline">The polyline to be used when constructing the <see cref="T:Speckle.Objects.Geometry.Polycurve"/></param>
            <returns>A <see cref="T:Speckle.Objects.Geometry.Polycurve"/> with the same shape as the provided polyline.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polycurve.ToList">
            <summary>
            Returns the values of this <see cref="T:Speckle.Objects.Geometry.Polycurve"/> as a list of numbers
            </summary>
            <returns>A list of values representing the polycurve.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polycurve.FromList(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Polycurve"/> based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of values representing this polycurve</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Polycurve"/> with the provided values.</returns>
        </member>
        <member name="T:Speckle.Objects.Geometry.Polyline">
            <summary>
            A polyline curve, defined by a set of vertices.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.value">
            <summary>
            Gets or sets the raw coordinates that define this polyline. Use GetPoints instead to access this data as <see cref="T:Speckle.Objects.Geometry.Point"/> instances instead.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.closed">
            <remarks>
            If true, do not add the last point to the value list. Polyline first and last points should be unique.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Polyline"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.domain">
            <summary>
            The internal domain of this curve.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.length">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Polyline.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polyline.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polyline.GetPoints">
            <remarks>This function may be suboptimal for performance for polylines with many points</remarks>
             <returns><see cref="P:Speckle.Objects.Geometry.Polyline.value"/> as List of <see cref="T:Speckle.Objects.Geometry.Point"/>s</returns>
             <exception cref="T:Speckle.Sdk.SpeckleException">when list is malformed</exception>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polyline.ToList">
            <summary>
            Returns the values of this <see cref="T:Speckle.Objects.Geometry.Polyline"/> as a list of numbers
            </summary>
            <returns>A list of values representing the polyline.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Polyline.FromList(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Polyline"/> based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of values representing this polyline</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Polyline"/> with the provided values.</returns>
        </member>
        <member name="T:Speckle.Objects.Geometry.Region">
            <summary>
            Flat polygon, defined by an outer boundary and inner loops.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.boundary">
            <summary>
            Boundary of a region.
            Should be a planar, closed, non-self-intersecting ICurve.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.innerLoops">
            <summary>
            Loops (voids) in the region.
            Each loop should be planar, closed, non-self-intersecting ICurve, located inside the boundary.
            The loops should not intersect or touch each other.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.units">
            <summary>
            The units of object's coordinates.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.hasHatchPattern">
            <summary>
            Indication whether the region is just a geometry (false) or has a hatch pattern (true).
            It's a distinction for receiving in apps that support both Region and Hatch (aka region with hatch pattern)
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.bbox">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Region.displayValue">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Region.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="T:Speckle.Objects.Geometry.Surface">
            <summary>
            A Surface in NURBS form.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.degreeU">
            <summary>
            The degree of the surface in the U direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.degreeV">
            <summary>
            The degree of the surface in the V direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.rational">
            <summary>
            Determines if the <see cref="T:Speckle.Objects.Geometry.Surface"/> is rational.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.pointData">
            <summary>
            The raw data of the surface's control points. Use <see cref="M:Speckle.Objects.Geometry.Surface.GetControlPoints"/> or <see cref="M:Speckle.Objects.Geometry.Surface.SetControlPoints(System.Collections.Generic.List{System.Collections.Generic.List{Speckle.Objects.Geometry.ControlPoint}})"/> instead of accessing this directly.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.countU">
            <summary>
            The number of control points in the U direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.countV">
            <summary>
            The number of control points in the V direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.knotsU">
            <summary>
            The knot vector in the U direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.knotsV">
            <summary>
            The knot vector in the V direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.domainU">
            <summary>
            The surface's domain in the U direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.domainV">
            <summary>
            The surface's domain in the V direction
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.closedU">
            <summary>
            Determines if a surface is closed around the <see cref="P:Speckle.Objects.Geometry.Surface.domainU"/>.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.closedV">
            <summary>
            Determines if a surface is closed around the <see cref="P:Speckle.Objects.Geometry.Surface.domainV"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Surface"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.area">
            <inheritdoc/>
        </member>
        <member name="P:Speckle.Objects.Geometry.Surface.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Surface.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Surface@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Surface.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Surface.GetControlPoints">
            <summary>
            Gets the control points of this s<see cref="T:Speckle.Objects.Geometry.Surface"/>
            </summary>
            <returns>A 2-dimensional array representing this <see cref="T:Speckle.Objects.Geometry.Surface"/>s control points.</returns>
            <remarks>The ControlPoints will be ordered following directions "[u][v]"</remarks>
        </member>
        <member name="M:Speckle.Objects.Geometry.Surface.SetControlPoints(System.Collections.Generic.List{System.Collections.Generic.List{Speckle.Objects.Geometry.ControlPoint}})">
            <summary>
            Sets the control points of this <see cref="T:Speckle.Objects.Geometry.Surface"/>.
            </summary>
            <param name="value">A 2-dimensional array of <see cref="T:Speckle.Objects.Geometry.ControlPoint"/> instances.</param>
            <remarks>The <paramref name="value"/> must be ordered following directions "[u][v]"</remarks>
        </member>
        <member name="M:Speckle.Objects.Geometry.Surface.ToList">
            <summary>
            Returns the coordinates of this <see cref="T:Speckle.Objects.Geometry.Surface"/> as a list of numbers
            </summary>
            <returns>A list of values representing the surface</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Surface.FromList(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a new <see cref="T:Speckle.Objects.Geometry.Surface"/> based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of values representing this surface</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Surface"/> with the provided values.</returns>
        </member>
        <member name="T:Speckle.Objects.Geometry.Vector">
            <summary>
            A 3-dimensional vector
            </summary>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.#ctor(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Constructs a new 2D <see cref="T:Speckle.Objects.Geometry.Vector"/> from it's X and Y coordinates.
            </summary>
            <param name="x">The x coordinate of the vector</param>
            <param name="y">The y coordinate of the vector</param>
            <param name="units">The units the coordinates are in.</param>
            <param name="applicationId">The unique application ID of the object.</param>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.units">
            <summary>
            The unit's this <see cref="T:Speckle.Objects.Geometry.Vector"/> is in.
            This should be one of <see cref="T:Speckle.Sdk.Common.Units"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.x">
            <summary>
            The x coordinate of the vector.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.y">
            <summary>
            The y coordinate of the vector.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.z">
            <summary>
            The z coordinate of the vector.
            </summary>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.Length">
            <summary>
            Gets the Euclidean length of this vector.
            </summary>
            <returns>Length of the vector.</returns>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.bbox">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.Geometry.Vector@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <inheritdoc/>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.ToList">
            <summary>
            Returns the coordinates of this <see cref="T:Speckle.Objects.Geometry.Vector"/> as a list of numbers
            </summary>
            <returns>A list of coordinates {x, y, z} </returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.FromList(System.Collections.Generic.IReadOnlyList{System.Double},System.String)">
            <summary>
            Creates a new vector based on a list of coordinates and the unit they're drawn in.
            </summary>
            <param name="list">The list of coordinates {x, y, z}</param>
            <param name="units">The units the coordinates are in</param>
            <returns>A new <see cref="T:Speckle.Objects.Geometry.Vector"/> with the provided coordinates.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.op_Division(Speckle.Objects.Geometry.Vector,System.Double)">
            <summary>
            Divides a vector by a numerical value. This will divide each coordinate by the provided value.
            </summary>
            <param name="vector">The vector to divide</param>
            <param name="val">The value to divide by</param>
            <returns>The resulting <see cref="T:Speckle.Objects.Geometry.Vector"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.op_Multiply(Speckle.Objects.Geometry.Vector,System.Double)">
            <summary>
            Multiplies a vector by a numerical value. This will multiply each coordinate by the provided value.
            </summary>
            <param name="vector">The vector to multiply</param>
            <param name="val">The value to multiply by</param>
            <returns>The resulting <see cref="T:Speckle.Objects.Geometry.Vector"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.op_Addition(Speckle.Objects.Geometry.Vector,Speckle.Objects.Geometry.Vector)">
            <summary>
            Adds two vectors by adding each of their coordinates.
            </summary>
            <param name="vector1">The first vector</param>
            <param name="vector2">The second vector</param>
            <returns>The resulting <see cref="T:Speckle.Objects.Geometry.Vector"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.op_Subtraction(Speckle.Objects.Geometry.Vector,Speckle.Objects.Geometry.Vector)">
            <summary>
            Subtracts two vectors by subtracting each of their coordinates.
            </summary>
            <param name="vector1">The first vector</param>
            <param name="vector2">The second vector</param>
            <returns>The resulting <see cref="T:Speckle.Objects.Geometry.Vector"/></returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.DotProduct(Speckle.Objects.Geometry.Vector,Speckle.Objects.Geometry.Vector)">
            <summary>
            Gets the scalar product (dot product) of two given vectors
            Dot product = u1*v1 + u2*v2 + u3*v3.
            </summary>
            <param name="u">First vector.</param>
            <param name="v">Second vector.</param>
            <returns>Numerical value of the dot product.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.CrossProduct(Speckle.Objects.Geometry.Vector,Speckle.Objects.Geometry.Vector)">
            <summary>
            Computes the vector product (cross product) of two given vectors
            Cross product = { u2 * v3 - u3 * v2; u3 * v1 - u1 * v3; u1 * v2 - u2 * v1 }.
            </summary>
            <param name="u">First vector.</param>
            <param name="v">Second vector.</param>
            <returns>Vector result of the cross product.</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.Normalize">
            <summary>
            Compute and return a unit vector from this vector
            </summary>
            <returns>a normalized unit vector</returns>
        </member>
        <member name="M:Speckle.Objects.Geometry.Vector.Negate">
            <summary>
            Inverses the direction of the vector, equivalent to multiplying by -1
            </summary>
            <returns>A pointing in the opposite direction</returns>
        </member>
        <member name="P:Speckle.Objects.Geometry.Vector.value">
            <summary>
            Gets or sets the coordinates of the vector
            </summary>
        </member>
        <member name="T:Speckle.Objects.IHasBoundingBox">
            <summary>
            Represents an object that has a <see cref="P:Speckle.Objects.IHasBoundingBox.bbox"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.IHasBoundingBox.bbox">
            <summary>
            The bounding box containing the object.
            </summary>
        </member>
        <member name="T:Speckle.Objects.IHasArea">
            <summary>
            Represents a <see cref="T:Speckle.Sdk.Models.Base"/> object that has <see cref="P:Speckle.Objects.IHasArea.area"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.IHasArea.area">
            <summary>
            The area of the object
            </summary>
        </member>
        <member name="T:Speckle.Objects.IHasVolume">
            <summary>
            Represents an object that has <see cref="P:Speckle.Objects.IHasVolume.volume"/>
            </summary>
        </member>
        <member name="P:Speckle.Objects.IHasVolume.volume">
            <summary>
            The volume of the object
            </summary>
        </member>
        <member name="T:Speckle.Objects.ICurve">
            <summary>
            Represents
            </summary>
        </member>
        <member name="P:Speckle.Objects.ICurve.length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="P:Speckle.Objects.ICurve.domain">
            <summary>
            The numerical domain driving the curve's internal parametrization.
            </summary>
        </member>
        <member name="T:Speckle.Objects.ITransformable`1">
            <summary>
            Generic Interface for transformable objects.
            </summary>
            <typeparam name="T">The type of object to support transformations.</typeparam>
        </member>
        <member name="M:Speckle.Objects.ITransformable`1.TransformTo(Speckle.Objects.Other.Transform,`0@)">
            <inheritdoc cref="M:Speckle.Objects.ITransformable.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)"/>
        </member>
        <member name="T:Speckle.Objects.ITransformable">
            <summary>
            Interface for transformable objects where the type may not be known on convert (eg ICurve implementations)
            </summary>
        </member>
        <member name="M:Speckle.Objects.ITransformable.TransformTo(Speckle.Objects.Other.Transform,Speckle.Objects.ITransformable@)">
            <summary>
            Returns a copy of the object with it's coordinates transformed by the provided <paramref name="transform"/>
            </summary>
            <param name="transform">The <see cref="T:Speckle.Objects.Other.Transform"/> to be applied.</param>
            <param name="transformed">The transformed copy of the object.</param>
            <returns>True if the transform operation was successful, false otherwise.</returns>
        </member>
        <member name="T:Speckle.Objects.IDisplayValue`1">
            <summary>
            Specifies displayable <see cref="T:Speckle.Sdk.Models.Base"/> simple geometries to be used as a fallback
            if a displayable form cannot be converted.
            </summary>
            <example>
            <see cref="T:Speckle.Sdk.Models.Base"/> objects that represent conceptual / abstract / mathematically derived geometry
            can use <see cref="P:Speckle.Objects.IDisplayValue`1.displayValue"/> to be used in case the object lacks a natively displayable form.
            (e.g <see cref="T:Speckle.Objects.Geometry.Spiral"/>)
            </example>
            <typeparam name="T">
            Type of display value.
            Expected to be either a <see cref="T:Speckle.Sdk.Models.Base"/> type or a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Speckle.Sdk.Models.Base"/>s,
            Should be constrained to types of <see cref="T:Speckle.Objects.Geometry.Point"/>, <see cref="T:Speckle.Objects.Geometry.Line"/>, <see cref="T:Speckle.Objects.Geometry.Mesh"/> or <see cref="T:Speckle.Objects.Geometry.Polyline"/>.
            </typeparam>
        </member>
        <member name="P:Speckle.Objects.IDisplayValue`1.displayValue">
            <summary>
            <see cref="P:Speckle.Objects.IDisplayValue`1.displayValue"/> <see cref="T:Speckle.Sdk.Models.Base"/>(s) will be used to display this <see cref="T:Speckle.Sdk.Models.Base"/>
            if a native displayable object cannot be converted.
            </summary>
        </member>
        <member name="T:Speckle.Objects.IProperties">
            <summary>
            Specifies properties on objects to be used for data-based workflows
            </summary>
        </member>
        <member name="P:Speckle.Objects.IDataObject.name">
            <summary>
            The name of the object, primarily used to decorate the object for consumption in frontend and other apps
            </summary>
        </member>
        <member name="T:Speckle.Objects.Other.RawEncoding">
            <summary>
            Keeps track of a raw-encoded object in a native supported format. see <see cref="T:Speckle.Objects.Other.RawEncodingFormats"/>
            </summary>
        </member>
        <member name="T:Speckle.Objects.Other.RawEncodingFormats">
            <summary>
            Supported encoding types "strongly" typed strings. This needs to match the extension of the file format.
            </summary>
        </member>
        <member name="T:Speckle.Objects.Other.RenderMaterial">
             <summary>
             Minimal physically based material DTO class. Based on references from
             https://threejs.org/docs/index.html#api/en/materials/MeshStandardMaterial
             Theoretically has equivalents in Unity and Unreal.
            
             See: https://docs.unrealengine.com/en-US/RenderingAndGraphics/Materials/PhysicallyBased/index.html
             And: https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/
             </summary>
        </member>
        <member name="T:Speckle.Objects.Other.RenderMaterialProxy">
            <summary>
            Used to store render material to object relationships in root collections
            </summary>
        </member>
        <member name="P:Speckle.Objects.Other.RenderMaterialProxy.objects">
            <summary>
            The list of application ids of objects that use this render material
            </summary>
        </member>
        <member name="P:Speckle.Objects.Other.RenderMaterialProxy.value">
            <summary>
            The render material used by <see cref="P:Speckle.Objects.Other.RenderMaterialProxy.objects"/>
            </summary>
        </member>
        <member name="T:Speckle.Objects.Other.Transform">
            <summary>
            Generic transform class
            </summary>
        </member>
        <member name="P:Speckle.Objects.Other.Transform.matrix">
            <summary>
            The column-based 4x4 transform matrix
            </summary>
            <remarks>
            Graphics based apps typically use column-based matrices, where the last column defines translation.
            Modelling apps may use row-based matrices, where the last row defines translation. Transpose if so.
            </remarks>
        </member>
        <member name="P:Speckle.Objects.Other.Transform.units">
            <summary>
            Units for translation
            </summary>
        </member>
        <member name="M:Speckle.Objects.Other.Transform.ConvertToUnits(System.String)">
            <summary>
            Converts this transform to the input units
            </summary>
            <param name="newUnits">The target units</param>
            <returns>A matrix array with the translation scaled by input units</returns>
            <remarks>If either the transform's <see cref="P:Speckle.Objects.Other.Transform.units"/> or the given <paramref name="newUnits"/> is <see langword="null"/>, will return the matrix array data unscaled</remarks>
        </member>
        <member name="M:Speckle.Objects.Other.Transform.ToArray">
            <summary>
            Returns the double array of the transform matrix
            </summary>
            <returns></returns>
        </member>
        <member name="T:Speckle.Objects.Utils.MeshTriangulationHelper">
            <summary>
            Set of functions to triangulate n-gon faces (i.e. polygon faces with an arbitrary (n) number of vertices) in <see cref="T:Speckle.Objects.Geometry.Mesh"/>es.
            </summary>
        </member>
        <member name="M:Speckle.Objects.Utils.MeshTriangulationHelper.TriangulateMesh(Speckle.Objects.Geometry.Mesh,System.Boolean)">
            <summary>
            Triangulates all faces in <paramref name="mesh"/>.
            </summary>
            <param name="mesh">The mesh to triangulate.</param>
            <param name="preserveQuads">If <see langword="true"/>, will not triangulate quad faces.</param>
        </member>
        <member name="M:Speckle.Objects.Utils.MeshTriangulationHelper.TriangulateFace(System.Int32,Speckle.Objects.Geometry.Mesh,System.Boolean)">
            <overloads>Overload using a <see cref="T:Speckle.Objects.Geometry.Mesh"/>, does not mutate <paramref name="mesh"/></overloads>
            <inheritdoc cref="M:Speckle.Objects.Utils.MeshTriangulationHelper.TriangulateFace(System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Double},System.Boolean)"/>
        </member>
        <member name="M:Speckle.Objects.Utils.MeshTriangulationHelper.TriangulateFace(System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Double},System.Boolean)">
            <summary>
            Calculates the triangulation of the face at <paramref name="faceIndex"/> in <paramref name="faces"/> list.
            </summary>
            <remarks>
            This implementation is based the ear clipping method
            Proposed by "Christer Ericson (2005) <i>Real-Time Collision Detection</i>".
            </remarks>
            <param name="faceIndex">The index of the face's cardinality indicator <c>n</c> in <paramref name="faces"/> list</param>.
            <param name="faces"></param>
            <param name="vertices"></param>
            <param name="includeIndicators">if <see langword="true"/>, the returned list will include cardinality indicators for each triangle
            (i.e 4 ints for each tri), otherwise will simply be 3 ints for each tri.</param>
            <returns>List of triangle faces in the specified format.</returns>
        </member>
        <member name="M:Speckle.Objects.Utils.MeshTriangulationHelper.TestPointTriangle(Speckle.Objects.Utils.MeshTriangulationHelper.Vector3,Speckle.Objects.Utils.MeshTriangulationHelper.Vector3,Speckle.Objects.Utils.MeshTriangulationHelper.Vector3,Speckle.Objects.Utils.MeshTriangulationHelper.Vector3)">
            <summary>
            Tests if point <paramref name="v"/> is within triangle <paramref name="a"/><paramref name="b"/><paramref name="c"/>
            </summary>
            <returns>true if <paramref name="v"/> is within triangle</returns>
        </member>
        <member name="M:Speckle.Objects.Utils.MeshTriangulationHelper.TriangleIsCCW(Speckle.Objects.Utils.MeshTriangulationHelper.Vector3,Speckle.Objects.Utils.MeshTriangulationHelper.Vector3,Speckle.Objects.Utils.MeshTriangulationHelper.Vector3,Speckle.Objects.Utils.MeshTriangulationHelper.Vector3)">
            <summary>
            Checks that triangle <paramref name="a"/><paramref name="b"/><paramref name="c"/> is clockwise with reference to <paramref name="referenceNormal"/>
            </summary>
            <param name="referenceNormal">The normal direction of the face</param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns>true if triangle is ccw</returns>
        </member>
        <member name="T:Speckle.Objects.Utils.MeshTriangulationHelper.Vector3">
            <summary>
            3-dimension x, Y, Z Vector of <see cref="T:System.Double"/>s encapsulating necessary vector mathematics
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
